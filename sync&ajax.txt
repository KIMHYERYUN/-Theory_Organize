동기(sync-순서
비동기(async-비순서
funciton echo(str){ setTimeout(function () { 
	console.log(str);
	//complete
}, 1000 * Math.random());  1초 무작위 타임아웃을 가져 순서 뒤죽박죽
echo('1');
echo('2'); 
echo('3');


비동기 -> 동기 : callback 함수 이용 : 첫번째 할일을 다하고 다음 함수를 실행해줄 수 있도록 순서마련
funciton echo(str, callback){ setTimeout(function(){
	console.log(str);
	//complete
	callback();
}, 1000 * Math.random()); 
echo('1', function(){
	echo('2', function(){
		echo('3', function(){
		});
	});
});


-> 하지만 보기 어려움

-> await 활용 : Promise, async, await


ajax(Asynchronous JavaScript and XML) : 비동기적으로 서버에서 데이터를 받아오고 처리할 수 있도록 도와주는 것


microsoft-InternetExplore / Netscape-Netscape Navigator / moz://a-Firefox  웹브라우저 다양(경쟁, 다른구현방식)
 -> 라이브러리 : jQuery, dojo, mootools 등을 만들어서 다른 구현방식 신경쓰지 않게 함
 -> 

구현이 변경되더라도 인터페이스가 변경되더라도 사용자가 쓰고 잇는 코드는 변하지 않도록 만드는 것!

->chorme 출현 : jit(just in time compilation) - java의 속도가 빠른 엔진
->ECMAScript 5 표준안 만들어짐 : default parameter, class, arrow function, const, let 등
->javascript만으로 라이브러리 없이 웹 API 만으로도 구현 가능
-> ECMA 최신 - BABEL - ECMA 다른버전으로 변환가능 : JavaScript transcompiler

SPA(Single Page Application_ : 한페이지 안에서 필요한 데이터 부분만 부분적으로 업데이트 /
javascript만으로도 가능하나 react, angular, vue 등 라이브러리, 프레임워크 이용하면 더 쉽게 구현가능
브라우저에서 브라우저를 위한 동적인 요소 추가하기 위한 언어

node.js : back-end에서도 구현 / 브라우저 없이도 javascript 실행가능
react/colderbar - mobile
electron - desktop


웹에서는 javascript 말고도 요즘 web assembly도 



html - js src 연결 : 콘솔 관련(동적으로 확인 가능)
dev tools



javascript - ecma-international.org / developer.mozilla.org

1. <html> <head> <script></script> </head> <body></body></html>: parsing - fetching - executing - parsing
html 한줄씩 parsing(이해) - script 해당사항 다운받아야하네(fetching) + 실행(executing) - 다시 parsing : 사이즈가 너무 크거나 시간 소요
2.  <html> <head> </head> <body></body><script> </script></html>그래서 head 말고 body 이후로 : 페이지는 준비되었으나 다운받고 실행하는 부분은 시간소요
3. <html> <head> <script asyn></script> </head> <body></body></html>: parsing+fetching-executing-parsing : 다운로드 시간 절약, html 실행되기 전 script 실행되기 때문에 반영되지 않고 시간은 여전히 소요
4.<html> <head> <script defer></script> </head> <body></body></html>: parsing+fetching-parsing - executing  : 가장 이상적, html 보여줌
js는 다운로드 되고 실행되면 html parsing x , 
asyn : 다운로드 먼저 된 것부터 실행 - 비순서적
defer : 다운로드 실행 - 맨 나중에 순서대로 실행


js 
'use strict' : //added ECMAScript 5 : 기존 상식적인 것들 준수할 수 있음


---------------------------------------------------------
입력->연산->출력 -> 전송

cpu 최적화 연산 + 메모리 사용 최소화






