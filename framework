 프로그래밍
- 프로그래밍은 요구사항의 집합을 분석해서 적절한 자료구조와 함수의 집합으로 변환한 후, 그 흐름을 제어하는 것이다.

# 렌더링
n HTML, CSS, 자바스크립트로 작성된 문서를 해석해서 브라우저에 시각적으로 출력하는 것. 때로는 서버에서 데이터를 HTML로 변환해서 브라우저에게 전달하는 과정을 가리키기도 함.

# Ajax
- 자바스크립트를 이용해 서버와 브라우저가 비동기방식으로 데이터를 교환할 수 있는 통신 기능
- 화면이 전환되면 서버로부터 새로운 HTML을 전송받아 웹페이지를 렌더링하는데 Ajax가 등장하면서 웹페이지에서 변경할 필요가 없는 부분은 다시 렌더링하지 않고, 서버로부터 필요한 데이터만 전송받아 변경해야 하는 부분만 한정적으로 렌더링하는 방식이 가능해짐

# Node.js
- 구글 V8 자바스크립트 엔진으로 빌드된 자바스크립트 런타임 환경
- 브라우저의 자바스크립트 엔진에서만 동작하던 자바스크립트를 브라우저 이외의 환경에서도 동작할 수 있도록 자바스크립트 엔진을 브라우저에서 독립시킨 자바스크립트 실행 환경. 주로 서버 사이드 애플리케이션 개별에 사용됨
- 비동기 I/O를 지원하며 단일 스레드 이벤트 루프 기반으로 동작함으로써 요청 처리 성능이 좋음. 따라서 Node.js는 데이터를 실시간으로 처리하기 위해 I/O가 빈번하게 발생하는 SPA(Single Page Application)에 적합하다. 하지만 CPU 사용률이 높은 애플리케이션에는 권장하지 않는다.
- Node.js의 등장으로 프론트엔드 영역과 백엔드 영역까지 아우르는 웹 프로그래밍 언어의 표준으로 자리잡게 되었다.

# 프레임워크
- 소프트웨어 어플리케이션이나 솔루션의 개발을 수월하게 하기 위해 소프트웨어의 구체적 기능들에 해당하는 부분의 설계와 구현을 재사용 가능하도록 협업화된 형태로 제공하는 소프트웨어 환경

# 프레임워크와 라이브러리의 차이점
- 프레임워크는 명확하게 정의된 API를 가지고 코드를 재사용 가능한 형태로 구조화한다는 점에서 라이브러리와 비슷하다. 그러나 라이브러리에서는호출 측이 전체 프로그램 제어 구조를 지정할 수 없지만, 프레임워크에서는 이러한 제어의 반전이 가능하다. 또한 라이브러리와 달리 프레임워크는 사용자가 선택적 오버라이딩이나 특정 기능을 수행하는 사용자 코드로 특수화하여 코드를 확장 재사용할 수 있다.

# SPA 프레임워크
- 개발 규모와 복잡도가 상승해서 라이브러리 출현. 그 덕분에 개발에 많은 도움을 주었지만 변경에 유연하면서 확장하기 쉬운 애플리케이션 아키텍처의 구축을 어렵게 하였다. 그래서 프레임워크가 등장하게 되었다.
- CBD(Component Based Development)방법론을 기반으로 하는 SPA가 대중화 되면서 Angular, React, Vue.js, Svelte 등 다양한 SPA 프레임워크/라이브러리 또한 많은 사용층을 확보하고 있다.


########################################################################################################################


framework -> 둘 공통으로 구현할 수 있는 각종 기능을 수행하는 여러코드 미리 탑재 툴
    fullstack = front-end(angular, react..) + back-end(node, flask, django, cherrypie, pyramid...)

    flask - -초보 개발자나 소규모 프로젝트
    django - 대규모 사업 프로젝트

      client - server               - database
    (browser) (powerful computer) (spread sheet-data)

    1. client - request - server
    2. server - response(html, css, js) - client(homepage 렌더링)


kernel : 하드웨어와 상호작용하는 실제 프로그램, 운영체제 핵심부
shell : 사용자 인터페이스, kernel과 소통

GUI : Graphic User Interface
CLI : Command Line Interface


명령어 : utility + (-, --)flag + argument
http://www.cs.columbia.edu/~sedwards/classes/2015/1102-fall/Command%20Prompt%20Cheatsheet.pdf

dir : 현재위치 확인
    ls : 현재 폴더 파일
    ls -l : 더 자세히
    ls -al : 더 더 자세히
cd : 디렉토리 변경 (해당 글자 + tab -> 선택지 추려짐) : 상위(cd..)
cls : 지우기
mkdir : 새폴더 형성
touch : 새파일 형성
. : 현재
.. : 부모
rmdir : 폴더 삭제(파일, 폴더 없을 시)
rm -rf : 폴더 강제삭제
copy 파일명 위치 : 복사
move 파일명 위치 : 이동
help 유틸리티 : 도움말
sudo